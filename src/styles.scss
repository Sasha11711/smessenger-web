/* You can add global styles to this file, and also import other style files */
@use "variables" as v;
@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@300&display=swap');

::-webkit-scrollbar {
  width: 10px;
  background: none;

  &-thumb {
    background: v.$brown;
  }
}

* {
  font-family: 'Roboto', math;
  transition: all 50ms, background-color 100ms;
}

body {
  margin: 0;
  background-color: v.$light_brown;
}

a, button {
  cursor: pointer;
}

hr {
  height: 2px;
  background-color: v.$dark_brown;
  margin-top: 10px;
}

form {
  width: 50svmin;
}

input[type="text"], input[type="password"] {
  background: linear-gradient(#000, #000) center bottom 5px /100% 1px no-repeat;
  border: none;

  &:focus {
    outline: none;
  }
}

form .form-input {
  &.ng-dirty.ng-valid {
    background: linear-gradient(v.$correct, v.$correct) center bottom 5px /100% 1px no-repeat;
  }

  &.ng-dirty.ng-invalid {
    background: linear-gradient(v.$incorrect, v.$incorrect) center bottom 5px /100% 1px no-repeat;
  }
}

.form-input {
  height: v.$default_size;
  width: 100%;

  &[type="text"], &[type="password"] {
    font-size: medium;

    &::placeholder {
      color: v.$brown;
    }
  }
}

.file-input {
  display: none;
}

.text-primary, .button-secondary {
  color: v.$dark_brown;
}

.text-secondary, .button-primary {
  color: v.$light_brown;
}

.button-primary, .button-secondary, .button-image {
  transform: translateY(-1px);

  &:is(a):active, &:enabled:active {
    transform: translateY(0);
  }

  &:disabled {
    opacity: 0.66;
    cursor: default;
  }
}

.button-image {
  background: transparent;

  & > div {
    height: v.$big_size - 20px;
    width: v.$big_size - 20px;
    padding: 10px;

    & > img {
      height: 100%;
      width: 100%;
      filter: opacity(.25) drop-shadow(0 0 0 v.$light_brown) drop-shadow(0 0 0 v.$light_brown) drop-shadow(0 0 0 v.$light_brown);
    }
  }

  &:is(button):hover:enabled > div, &:is(a):hover > div {
    background-color: v.$dark_brown;
  }
}

.button-primary, .button-secondary {
  min-height: v.$small_size;
  font-weight: bolder;
  text-transform: uppercase;
  border: none;
  border-radius: 3px;
  box-shadow: 0 1px 3px v.$brown;

  &:is(a) {
    text-decoration: none;
    line-height: v.$small_size;
    font-size: small;
  }
}

.button-primary {
  background-color: v.$brown;

  &:is(button):hover:enabled, &:is(a):hover {
    background-color: v.$dark_brown;
  }
}

.button-secondary {
  background-color: v.$light_brown;

  &:is(button):hover:enabled, &:is(a):hover {
    background-color: v.$brown;
    color: v.$light_brown;
  }
}

.block {
  display: block;
  margin-top: 40px;
  margin-bottom: 10px;
}

.item-flex {
  display: flex;
  gap: 20px;

  * {
    margin-bottom: 10px;
  }

  & > img {
    height: v.$big_size;
    width: v.$big_size;
    border-radius: 50%;
    margin-top: 5px;
    margin-left: 5px;
  }
}

.text {
  max-height: 60px;
}

.text-center {
  text-align: center;
}

.align-right {
  text-align: right;
}

.center {
  margin-left: auto;
  margin-right: auto;
}

.right {
  margin-left: auto;
}

.error {
  color: v.$incorrect;
  margin: 0;

  &::before {
    content: "*";
  }
}
